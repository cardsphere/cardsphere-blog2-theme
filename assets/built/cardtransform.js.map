{"version":3,"sources":["cardtransform.js"],"names":["window","jQuery","$","cardpeek","replaceContent","resolved","$codes","each","i","code","parentElement","nodeName","el","text","lines","split","main","side","sublist","line","trim","m","exec","c","push","quantity","length","typeGroups","reduce","r","a","key","types","Object","create","$p","class","$main","appendTo","$side","typeOrder","Planeswalker","Creature","Instant","Sorcery","Enchantment","Artifact","Land","sortedKeys","keys","sort","b","groupKey","items","name","$sublist","toLocaleLowerCase","item","append","href","url","data-image","image","replaceWith","replaceDeck","textContent","replaceCard","toResolve","accumulator","parseDeck","ajax","base_url","data","JSON","stringify","contentType","type","done"],"mappings":"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","file":"cardtransform.js","sourcesContent":["window.jQuery(function ($) {\n\n    cardpeek('body', '.cardpeek');\n\n    var base_url = 'https://www.cardsphere.com';\n\n    var parseDeck = function (text, accumulator) {\n        var lines = text.split(\"\\n\");\n        $.each(lines, function (i, line) {\n            var m = /\\s*(\\d+) (.*)/g.exec(line);\n            if (m) {\n                accumulator.push(m[2].trim());\n            }\n        });\n    };\n    var replaceDeck = function (el, text, resolved) {\n        var lines = text.split(\"\\n\");\n        var main = [];\n        var side = [];\n        var sublist = main;\n        $.each(lines, function (i, line) {\n            line = line.trim();\n            var m = /\\s*(\\d+) (.*)/g.exec(line);\n            if (m) {\n                var c = resolved[m[2].trim()];\n                if (c) {\n                    sublist.push({\n                        quantity: m[1],\n                        resolved: c\n                    });\n                }\n            } else if (main.length > 0 && line == \"\") {\n                // switch to filling SB\n                sublist = side;\n            }\n        });\n        // broup by type\n        var typeGroups = main.reduce(function (r, a) {\n            var key = a.resolved.types[a.resolved.types.length - 1]; // last type\n            r[key] = r[key] || [];\n            r[key].push(a);\n            return r;\n        }, Object.create(null));\n\n        var $p = $('<p/>', { class: 'decklist' })\n        var $main = $('<ul/>', { class: 'decklist-mainboard' }).appendTo($p);\n        var $side = $('<ul/>', { class: 'decklist-sideboard' }).appendTo($p);\n\n        var typeOrder = {\n            'Planeswalker': 1,\n            'Creature': 2,\n            'Instant': 3,\n            'Sorcery': 4,\n            'Enchantment': 5,\n            'Artifact': 6,\n            'Land': 7,\n        }\n        var sortedKeys = Object.keys(typeGroups).sort(function (a, b) {\n            return typeOrder[a] > typeOrder[b];\n        });\n\n        for (var i = 0; i < sortedKeys.length; i++) {\n            var groupKey = sortedKeys[i];\n            var items = typeGroups[groupKey];\n            items.sort(function (a, b) {\n                return a.resolved.name > b.resolved.name;\n            });\n            var $sublist = $('<ul/>', { class: 'decklist-mainboard-sublist decklist-mainboard-' + groupKey.toLocaleLowerCase() }).appendTo($main);\n            $.each(items, function (i, item) {\n                var $li = $('<li>', { class: 'decklist-card' }).append([\n                    $('<span/>', { class: 'decklist-card-quantity' }).text(item.quantity + 'x '),\n                    $('<a/>', {\n                        href: item.resolved.url,\n                        class: 'decklist-card-link cardpeek',\n                        'data-image': item.resolved.image,\n                    }).text(item.resolved.name)\n                ]).appendTo($sublist);\n            });\n        }\n        $.each(side, function (i, item) {\n            var $li = $('<li>', { class: 'decklist-card' }).append([\n                $('<span/>', { class: 'decklist-card-quantity' }).text(item.quantity + 'x '),\n                $('<a/>', {\n                    href: item.resolved.url,\n                    class: 'decklist-card-link cardpeek',\n                    'data-image': item.resolved.image,\n                }).text(item.resolved.name)\n            ]).appendTo($side);\n        });\n        $(el).replaceWith($p);\n    };\n    var replaceCard = function (el, resolved) {\n        var c = resolved[el.textContent.trim()];\n        if (c) {\n            $(el).replaceWith($('<a/>', {\n                href: c.url,\n                class: 'cardpeek',\n                'data-image': c.image,\n            }).text(c.name));\n        }\n    };\n\n    var replaceContent = function (resolved) {\n        var $codes = $(\"code\");\n        $.each($codes, function (i, code) {\n            var isDeck = code.parentElement.nodeName == \"PRE\";\n            if (isDeck) {\n                replaceDeck(code.parentElement, code.textContent, resolved);\n            } else {\n                replaceCard(code, resolved);\n            }\n        });\n    };\n\n    var resolveCards = function () {\n        var toResolve = [];\n        var $codes = $(\"code\");\n        $.each($codes, function (i, code) {\n            var isDeck = code.parentElement.nodeName == \"PRE\";\n            if (isDeck) {\n                parseDeck(code.textContent, toResolve)\n            } else {\n                toResolve.push(code.textContent.trim());\n            }\n        });\n\n        $.ajax(base_url + '/rest/v1/cardinfo/resolve', {\n            data: JSON.stringify(toResolve),\n            contentType: 'application/json',\n            type: 'POST',\n        }).done(function (data) {\n            var resolved = {};\n            for (var i = 0; i < toResolve.length; i++) {\n                resolved[toResolve[i]] = data[i]\n            }\n            replaceContent(resolved);\n        });\n    };\n\n    resolveCards();\n\n});"]}