{"version":3,"sources":["cardtransform.js"],"names":["window","jQuery","$","cardpeek","replaceContent","resolved","$codes","each","i","code","parentElement","nodeName","el","text","lines","split","main","side","sublist","hasUnresolved","line","trim","m","exec","c","push","quantity","length","replaceDeckSimple","typeGroups","reduce","r","a","key","types","Object","create","$p","class","$main","appendTo","$side","typeOrder","Planeswalker","Creature","Instant","Sorcery","Enchantment","Artifact","Land","sortedKeys","keys","sort","b","groupKey","items","name","$sublist","toLocaleLowerCase","item","append","href","url","data-image","image","replaceWith","replaceDeck","textContent","replaceCard","toResolve","cardName","unresolved","accumulator","parseDeck","ajax","base_url","data","JSON","stringify","contentType","type","done"],"mappings":"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","file":"cardtransform.js","sourcesContent":["window.jQuery(function ($) {\n\n    cardpeek('body', '.cardpeek');\n\n    var base_url = 'https://www.cardsphere.com';\n\n    var parseDeck = function (text, accumulator) {\n        var lines = text.split(\"\\n\");\n        $.each(lines, function (i, line) {\n            var m = /\\s*(\\d+) (.*)/g.exec(line);\n            if (m) {\n                accumulator.push(m[2].trim());\n            }\n        });\n    };\n    var replaceDeck = function (el, text, resolved) {\n        var lines = text.split(\"\\n\");\n        var main = [];\n        var side = [];\n        var sublist = main;\n        var hasUnresolved = false;\n        $.each(lines, function (i, line) {\n            line = line.trim();\n            var m = /\\s*(\\d+) (.*)/g.exec(line);\n            if (m) {\n                var c = resolved[m[2].trim()];\n                if (c) {\n                    sublist.push({\n                        quantity: m[1],\n                        resolved: c\n                    });\n                } else {\n                    hasUnresolved = true;\n                }\n            } else if (main.length > 0 && line == \"\") {\n                // switch to filling SB\n                sublist = side;\n            }\n        });\n\n        if(hasUnresolved) {\n            replaceDeckSimple(el, text, resolved);\n            return;\n        }\n\n        // broup by type\n        var typeGroups = main.reduce(function (r, a) {\n            var key = a.resolved.types[a.resolved.types.length - 1]; // last type\n            r[key] = r[key] || [];\n            r[key].push(a);\n            return r;\n        }, Object.create(null));\n\n        var $p = $('<p/>', { class: 'decklist' })\n        var $main = $('<ul/>', { class: 'decklist-mainboard' }).appendTo($p);\n        var $side = $('<ul/>', { class: 'decklist-sideboard' }).appendTo($p);\n\n        var typeOrder = {\n            'Planeswalker': 1,\n            'Creature': 2,\n            'Instant': 3,\n            'Sorcery': 4,\n            'Enchantment': 5,\n            'Artifact': 6,\n            'Land': 7,\n        }\n        var sortedKeys = Object.keys(typeGroups).sort(function (a, b) {\n            return typeOrder[a] > typeOrder[b];\n        });\n\n        for (var i = 0; i < sortedKeys.length; i++) {\n            var groupKey = sortedKeys[i];\n            var items = typeGroups[groupKey];\n            items.sort(function (a, b) {\n                return a.resolved.name > b.resolved.name;\n            });\n            var $sublist = $('<ul/>', { class: 'decklist-mainboard-sublist decklist-mainboard-' + groupKey.toLocaleLowerCase() }).appendTo($main);\n            $.each(items, function (i, item) {\n                var $li = $('<li>', { class: 'decklist-card' }).append([\n                    $('<span/>', { class: 'decklist-card-quantity' }).text(item.quantity + 'x '),\n                    $('<a/>', {\n                        href: item.resolved.url,\n                        class: 'decklist-card-link cardpeek',\n                        'data-image': item.resolved.image,\n                    }).text(item.resolved.name)\n                ]).appendTo($sublist);\n            });\n        }\n        $.each(side, function (i, item) {\n            var $li = $('<li>', { class: 'decklist-card' }).append([\n                $('<span/>', { class: 'decklist-card-quantity' }).text(item.quantity + 'x '),\n                $('<a/>', {\n                    href: item.resolved.url,\n                    class: 'decklist-card-link cardpeek',\n                    'data-image': item.resolved.image,\n                }).text(item.resolved.name)\n            ]).appendTo($side);\n        });\n        $(el).replaceWith($p);\n    };\n    var replaceDeckSimple = function (el, text, resolved) {\n        var lines = text.split(\"\\n\");\n        var main = [];\n        var side = [];\n        var sublist = main;\n        $.each(lines, function (i, line) {\n            line = line.trim();\n            var m = /\\s*(\\d+) (.*)/g.exec(line);\n            if (m) {\n                var cardName = m[2].trim();\n                var c = resolved[cardName];\n                if (c) {\n                    sublist.push({\n                        quantity: m[1],\n                        resolved: c\n                    });\n                } else {\n                    sublist.push({\n                        quantity: m[1],\n                        unresolved: cardName\n                    });\n                }\n            } else if (main.length > 0 && line == \"\") {\n                // switch to filling SB\n                sublist = side;\n            }\n        });\n\n        var $p = $('<p/>', { class: 'decklist' })\n        var $main = $('<ul/>', { class: 'decklist-mainboard' }).appendTo($p);\n        var $side = $('<ul/>', { class: 'decklist-sideboard' }).appendTo($p);\n\n\n        $.each(main, function (i, item) {\n            var $li = $('<li>', { class: 'decklist-card' }).append([\n                $('<span/>', { class: 'decklist-card-quantity' }).text(item.quantity + 'x '),\n                (item.resolved)\n                ?$('<a/>', {\n                    href: item.resolved.url,\n                    class: 'decklist-card-link cardpeek',\n                    'data-image': item.resolved.image,\n                }).text(item.resolved.name)\n                :$('<span/>', {\n                    class: 'decklist-card-link',\n                }).text(item.unresolved)\n            ]).appendTo($main);\n        });\n        $.each(side, function (i, item) {\n            var $li = $('<li>', { class: 'decklist-card' }).append([\n                $('<span/>', { class: 'decklist-card-quantity' }).text(item.quantity + 'x '),\n                (item.resolved)\n                ?$('<a/>', {\n                    href: item.resolved.url,\n                    class: 'decklist-card-link cardpeek',\n                    'data-image': item.resolved.image,\n                }).text(item.resolved.name)\n                :$('<span/>', {\n                    class: 'decklist-card-link',\n                }).text(item.unresolved)\n            ]).appendTo($side);\n        });\n\n        $(el).replaceWith($p);\n    };\n    var replaceCard = function (el, resolved) {\n        var c = resolved[el.textContent.trim()];\n        if (c) {\n            $(el).replaceWith($('<a/>', {\n                href: c.url,\n                class: 'cardpeek',\n                'data-image': c.image,\n            }).text(c.name));\n        } else {\n            $(el).replaceWith($('<span/>', {}).text(el.textContent));\n        }\n    };\n\n    var replaceContent = function (resolved) {\n        var $codes = $(\"code\");\n        $.each($codes, function (i, code) {\n            var isDeck = code.parentElement.nodeName == \"PRE\";\n            if (isDeck) {\n                replaceDeck(code.parentElement, code.textContent, resolved);\n            } else {\n                replaceCard(code, resolved);\n            }\n        });\n    };\n\n    var resolveCards = function () {\n        var toResolve = [];\n        var $codes = $(\"code\");\n        $.each($codes, function (i, code) {\n            var isDeck = code.parentElement.nodeName == \"PRE\";\n            if (isDeck) {\n                parseDeck(code.textContent, toResolve)\n            } else {\n                toResolve.push(code.textContent.trim());\n            }\n        });\n\n        $.ajax(base_url + '/rest/v1/cardinfo/resolve', {\n            data: JSON.stringify(toResolve),\n            contentType: 'application/json',\n            type: 'POST',\n        }).done(function (data) {\n            var resolved = {};\n            for (var i = 0; i < toResolve.length; i++) {\n                resolved[toResolve[i]] = data[i]\n            }\n            replaceContent(resolved);\n        });\n    };\n\n    resolveCards();\n\n});"]}